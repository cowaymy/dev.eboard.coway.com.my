{"remainingRequest":"D:\\extrust\\eboard.coway.com.my\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\extrust\\eboard.coway.com.my\\src\\views\\account-settings\\AccountSettingsNotification.vue?vue&type=style&index=0&id=18bfee6a&lang=scss&scoped=true&","dependencies":[{"path":"D:\\extrust\\eboard.coway.com.my\\src\\views\\account-settings\\AccountSettingsNotification.vue","mtime":1711338974976},{"path":"D:\\extrust\\eboard.coway.com.my\\node_modules\\css-loader\\dist\\cjs.js","mtime":1689230672011},{"path":"D:\\extrust\\eboard.coway.com.my\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1689230680621},{"path":"D:\\extrust\\eboard.coway.com.my\\node_modules\\postcss-loader\\src\\index.js","mtime":1689230675067},{"path":"D:\\extrust\\eboard.coway.com.my\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1689230669010},{"path":"D:\\extrust\\eboard.coway.com.my\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689230669062},{"path":"D:\\extrust\\eboard.coway.com.my\\node_modules\\vue-loader\\lib\\index.js","mtime":1689230676606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5leGFtcGxlIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgaGVpZ2h0OiAyM3JlbTsKICAuZWRpdG9yIHsKICAgIGhlaWdodDogMTVyZW07CiAgICBtYXJnaW4tYm90dG9tOiAwOwogIH0KCn0K"},{"version":3,"sources":["AccountSettingsNotification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"AccountSettingsNotification.vue","sourceRoot":"src/views/account-settings","sourcesContent":["<template>\n  <v-card flat class=\"pa-3\">\n    <v-form class=\"multi-col-validation\" @submit.prevent=\"submitForm\">\n\n      <v-card-text class=\"pt-5\">\n        <v-row class=\"fill-height \">          \n          <v-col cols=\"12\">\n            <v-text-field\n              v-model=\"subject\"\n              label=\"Subject\"\n              dense\n              hide-details\n              outlined\n            ></v-text-field>\n          </v-col>\n\n          <v-col cols=\"12\">\n            <div class=\"example\">\n                <quill-editor\n                  ref=\"quillio\"\n                  class=\"editor\"\n                  v-model=\"contents\"\n                  :options=\"editorOption\"\n                  placeholder= \"Insert text here ...\"\n                  @blur=\"onEditorBlur($event)\"\n                  @focus=\"onEditorFocus($event)\"\n                  @ready=\"onEditorReady($event)\"\n                />\n              </div>\n            </v-col>\n            <v-divider></v-divider>\n          <v-col cols=\"12\" md=\"6\">\n          <div>\n            <v-dialog\n              ref=\"dialog\"\n              v-model=\"smodal\"\n              :return-value.sync=\"date\"\n              persistent\n              width=\"290px\"\n            >\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-text-field\n                  v-model=\"date\"\n                  label=\"Start Date\"\n                  :prepend-icon=\"icons.mdiCalendar\"\n                  readonly\n                  v-bind=\"attrs\"\n                  v-on=\"on\"\n                ></v-text-field>\n              </template>\n\n              <v-date-picker v-model=\"date\" scrollable color=\"primary\">\n                <v-btn text color=\"primary\" @click=\"smodal = false\">\n                  Cancel\n                </v-btn>\n                <v-btn text color=\"primary\" @click=\"$refs.dialog.save(date)\">\n                  OK\n                </v-btn>\n              </v-date-picker>\n            </v-dialog>\n          </div>\n        </v-col>\n     \n        <v-col cols=\"12\" md=\"6\">\n          <v-dialog\n            ref=\"dialog2\"\n            v-model=\"emodal\"\n            :return-value.sync=\"enddate\"\n            persistent\n            width=\"290px\"\n          >\n            <template v-slot:activator=\"{ on, attrs }\">\n              <v-text-field\n                v-model=\"enddate\"\n                label=\"End Date\"\n                :prepend-icon=\"icons.mdiCalendar\"\n                readonly\n                v-bind=\"attrs\"\n                v-on=\"on\"\n              ></v-text-field>\n            </template>\n            <v-date-picker v-model=\"enddate\" scrollable color=\"primary\">\n              <v-btn text color=\"primary\" @click=\"emodal = false\">\n                Cancel\n              </v-btn>\n              <v-btn text color=\"primary\" @click=\"$refs.dialog2.save(enddate)\">\n                OK\n              </v-btn>\n            </v-date-picker>\n          </v-dialog>\n        </v-col>\n       \n        <v-col cols=\"12\" md=\"6\">\n          <label class=\"text-1xl font-weight-semibold\">Target </label>\n          <v-treeview\n            v-model=\"selection\"\n            :items=\"items\"\n            :selection-type=\"selectionType\"\n            selectable\n            return-object\n          ></v-treeview>\n        </v-col>\n        <v-divider vertical></v-divider>\n\n        <v-col cols=\"12\" md=\"6\">\n          <template v-if=\"!selection.length\"> No nodes selected. </template>\n          <template v-else>\n            <div>\n              <v-chip-group\n                column\n                active-class=\"primary accent-4  font-weight-semibold\"\n              >\n                <v-chip v-for=\"node in selection\" :key=\"node.id\">\n                  {{ node.name }}\n                </v-chip>\n              </v-chip-group>\n            </div>\n          </template>\n        </v-col>\n        <v-divider></v-divider>\n\n        <v-col cols=\"12\" md=\"6\">\n          <label class=\"text-1xl font-weight-semibold\">Use </label>\n          <v-switch\n            v-model=\"useYn\"\n            :label=\"`${useYn.toString()}`\"\n            hide-details\n          ></v-switch>\n        </v-col>\n\n\n        <v-col cols=\"12\" md=\"6\">\n          <label class=\"text-1xl font-weight-semibold\">Notification Type</label>\n          <v-radio-group v-model=\"nType\" mandatory row>\n            <v-radio label=\"Emergency\" value=\"E\"></v-radio>\n            <v-radio label=\"Normal\" value=\"N\"></v-radio>\n          </v-radio-group>\n        </v-col>\n        <v-col cols=\"12\">\n         \n          <div>\n              <!-- 파일 업로드 컴포넌트 -->\n              <vue-dropzone\n                ref=\"dropzone\"\n                id=\"dropzone\"\n                :options=\"dropzoneOptions\"\n                @vdropzone-success=\"onSuccess\"\n                @vdropzone-error=\"onError\"\n                @vdropzone-complete=\"onComplete\"\n              ></vue-dropzone>\n                        \n              <!-- 업로드된 파일 목록 -->\n              <ul>\n                <li v-for=\"(file, index) in uploadedFiles\" :key=\"index\">{{ file.name }}</li>\n              </ul>\n          </div>\n        </v-col>\n      </v-row>  \n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer> \n        <v-btn color=\"primary\" type=\"submit\" :disabled=\"btIsActive\">\n            Submit\n        </v-btn>\n      </v-card-actions>\n    </v-form>\n  </v-card>\n</template>\n\n<script>\nimport { mdiChartTimelineVariant, mdiEmailOutline, mdiCalendar } from \"@mdi/js\";\n\nimport bus from \"../../utils/bus\";\nimport utils from \"../../utils/utils\";\nimport comApi from \"../../api/index\";\n\n\n\nimport 'quill/dist/quill.core.css'\nimport 'quill/dist/quill.snow.css'\nimport 'quill/dist/quill.bubble.css'\n\n// import { quillEditor } from 'vue-quill-editor'\n\nimport { quillEditor } from 'vue-quill-editor';\n\nimport 'vue2-dropzone/dist/vue2Dropzone.min.css'\nimport vueDropzone from 'vue2-dropzone';\n\nexport default {\n  props: {\n    notificationData: {\n      type: Object,\n      default: () => {},\n    },\n  },\n\n  components: {\n    quillEditor ,vueDropzone\n  },\n\n  data(props) {\n    const optionsLocale = JSON.parse(JSON.stringify(props.notificationData));\n    const useYn = true;\n\n    const items = [\n      {\n        id: \"ALL\",\n        name: \"ALL\",\n        children: [\n          {\n            id: \"SAL\",\n            name: \"SALES\",\n            children: [\n              { id: \"GM\", name: \"GM\" },\n              { id: \"SM\", name: \"SM\" },\n              { id: \"HM\", name: \"HM\" },\n              { id: \"HP\", name: \"HP\" },\n            ],\n          },\n          {\n            id: \"COD\",\n            name: \"CODY\",\n            children: [\n              { id: \"GCM\", name: \"GCM\" },\n              { id: \"SCM\", name: \"SCM\" },\n              { id: \"CM\", name: \"CM\" },\n              { id: \"CODY\", name: \"CODY\" },\n            ],\n          },\n        ],\n      },\n    ];\n\n    const date = new Date().toISOString().substr(0, 10);\n    const enddate = new Date().toISOString().substr(0, 10);\n\n    const smodal = \"\";\n    const emodal = \"\";\n    const nType = \"Emergency\";\n    const subject = \"\";\n    return {\n      selectionType: \"leaf\",\n      selection: [],\n      items,\n      optionsLocale,\n      date,\n      enddate,\n      smodal,\n      emodal,\n      nType,\n      useYn,\n      subject,\n      btIsActive: false,\n      selectedFile : null,\n      icons: { mdiChartTimelineVariant, mdiEmailOutline, mdiCalendar },\n      contents: '',\n      editorOption: {\n          modules: {\n            toolbar: [\n              ['bold', 'italic', 'underline', 'strike'],\n              ['blockquote', 'code-block'],\n              [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n              [{ 'script': 'sub' }, { 'script': 'super' }],\n              [{ 'indent': '-1' }, { 'indent': '+1' }],\n              [{ 'direction': 'rtl' }],\n              [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n              [{ 'font': [] }],\n              [{ 'color': [] }, { 'background': [] }],\n              [{ 'align': [] }],\n              ['link', 'image', 'video']\n            ]\n        }  \n      },\n      dropzoneOptions: {\n        url: 'http://localhost:3000/apps/api/upload/mFileUpload', // 파일 업로드를 처리할 서버의 엔드포인트\n        paramName: 'file', // 서버로 전송될 파일의 이름\n        maxFilesize: 5, // 최대 파일 크기 (MB)\n        // acceptedFiles: '.jpg, .jpeg, .png, .gif', // 허용되는 파일 형식\n        headers: { \"My-Awesome-Header\": \"header value\" }\n      },\n      uploadedFiles: [] // 업로드된 파일 목록을 저장할 배열\n    };\n  },\n\n  methods: {\n\n    onSuccess(file, response) {\n      console.log('파일 업로드 성공:', file, response.path);\n      this.uploadedFiles.push(file);\n    },\n    onError(file, error, xhr) {\n      console.error('파일 업로드 실패:', file, error, xhr);\n    },\n    onComplete(file) {\n      //console.log('파일 업로드 완료:', JSON.parse(file.xhr.response.path));\n    },\n\n    // imageButtonClickHandler() {\n\n    //   console.log('imageButtonClickHandler ====>')\n    //   // Add a file input element to the document, then click it (open file).\n    //   const input = document.createElement('input');\n    //   input.setAttribute('type', 'file');\n    //   input.click();\n\n    //   // Once file is selected.\n    //   input.onchange = () => {\n    //       const file = input.files[0];\n\n    //       // Validate file type is an image.\n    //       if (/^image\\//.test(file.type)) {\n\n    //           // Create form.\n    //           const formData = new FormData();\n    //           formData.append('image', file);\n              \n              \n    //           // Upload image to AWS via app route handler.\n    //           comApi.fileUpLoad(formData)\n    //           .then(function (response) {\n\n    //               // Set returned image URL to variable.\n    //               const url = response.data;\n\n    //               // Get the current cursor position.\n    //               const range = this.$refs.quillio.quill.getSelection();\n\n    //               // Insert the image via URL where the cursor is.\n    //               this.$refs.quillio.quill.insertEmbed(range.index, 'image', url);\n\n    //               // Move the cursor past the image.\n    //               this.$refs.quillio.quill.setSelection(range.index + 1);\n\n    //           })\n    //           .catch(function (error) {\n    //               console.log(error);\n    //           });\n    //       }\n\n    //       // Not an image.\n    //       else {\n    //           console.warn('You could only upload images.');\n    //       }\n    //   };\n    // },\n    async submitForm() {\n      try {\n          let target = \"\";\n          this.selection.forEach(function (v) {\n            console.log(v);\n            target += \"^\" + v.id;\n          });\n\n\n        console.log(this.$refs.dropzone.getAcceptedFiles())\n\n\n        let uploadedFileId =[];\n        let uploadedFileName =[];\n        let uploadedFileSize =[];\n        let uploadedFileType =[];\n        \n        this.$refs.dropzone.getAcceptedFiles().forEach(function (v) {\n\n\n          const obj = JSON.parse(v.xhr.response); \n          uploadedFileId.push(obj.path);\n          uploadedFileName.push(obj.name);\n          uploadedFileSize.push(v.size);\n          uploadedFileType.push(v.type);\n        });\n\n        const notiObj = {\n          SUBJECT: this.subject,\n          CONTENTS:   utils.escapeHtml( this.contents),\n          STD_DATE: this.date,\n          END_DATE: this.enddate,\n          TYPE: this.nType,\n          STATUS: this.useYn ? \"A\" : \"P\",\n          TARGET: target,\n          CRD_USER : this.$store.state.userInfo.userName,\n          UPLOAD_FILE_ID: uploadedFileId,\n          UPLOAD_FILE_NAME: uploadedFileName,\n          UPLOAD_FILE_SIZE: uploadedFileSize,\n          UPLOAD_FILE_TYPE: uploadedFileType,\n          NOTIFI_TRAN_MODE: 'NEW'\n          \n        };\n        //start spinner\n        bus.$emit(\"start:spinner\");\n\n\n        \n\n        const result = await comApi.saveNotification(notiObj);\n\n        if (result.data.success) {\n          this.$toasted\n            .success(\"It has been processed\", {\n              icon: \"check\",\n              position: \"bottom-right\",\n              action: {\n                text: \"Close\",\n                onClick: (e, toastObject) => {\n                  this.btIsActive = true;\n                  toastObject.goAway(0);\n                },\n              },\n            })\n            .goAway(2500);\n\n          this.btIsActive = true;\n        } else {\n          this.$toasted.show(result.message);\n        }\n      } catch (error) {\n        console.log(\"=========>\" + error);\n        bus.$emit(\"end:spinner\");\n      } finally {\n        bus.$emit(\"end:spinner\");\n      }\n    },\n\n    onEditorBlur(quill) {\n        //console.log('editor blur!', quill)\n      },\n      onEditorFocus(quill) {\n       // console.log('editor focus!', quill)\n      },\n      onEditorReady(quill) {\n       // quill.getModule('toolbar').addHandler('image', this.imageButtonClickHandler);\n        console.log('editor ready!', quill)\n      },\n      onEditorChange({ quill, html, text }) {\n       // console.log('editor change!', quill, html, text)\n        this.content = html\n      },\n\n      fileSelected(file) {\n        console.log('선택된 파일:', file);\n        // 선택된 파일을 여기서 처리할 수 있습니다.\n        this.uploadFile(file);\n      },\n      \n    async uploadFile(vFile) {\n      let form = new FormData();\n      form.append(\"name\", this.$store.state.userName);\n      form.append(\"files\", vFile);\n\n\n\n\n            \n      fetch('http://localhost:3000/apps/api/upload/mFileUpload', {\n          method: 'POST',\n          body: form,\n      })\n      .then((response) => { \n          console.log(response);\n      })\n      .catch((error) => {\n          console.error(error);\n      });\n\n\n\n      // //start spinner\n      // bus.$emit(\"start:spinner\");\n      // const result = await comApi.mfileUpLoad(form);\n\n      // if (result.data.success) {\n      //   this.$toasted\n      //     .success(\"It has been processed\", {\n      //       icon: \"check\",\n      //       position: \"bottom-right\",\n      //       action: {\n      //         text: \"Close\",\n      //         onClick: (e, toastObject) => {\n      //           toastObject.goAway(0);\n      //         },\n      //       },\n      //     })\n      //     .goAway(2500);\n      // }\n      // bus.$emit(\"end:spinner\");\n      // console.log(result);\n    },\n  }, \n\n  computed: {\n      editor() {\n        return this.$refs.quillio.quill\n      }\n    },\n    mounted() {\n      console.log('this is current quill instance object', this.editor)\n    }\n\n};\n</script>\n<style lang=\"scss\" scoped>\n  .example {\n    display: flex;\n    flex-direction: column;\n    height: 23rem;\n    .editor {\n      height: 15rem;\n      margin-bottom: 0;\n    }\n  \n  }\n</style>"]}]}