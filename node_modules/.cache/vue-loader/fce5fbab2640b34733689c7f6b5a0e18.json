{"remainingRequest":"D:\\extrust\\eboard\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\extrust\\eboard\\src\\views\\performance\\netSalesReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\extrust\\eboard\\src\\views\\performance\\netSalesReport.vue","mtime":1710479565336},{"path":"D:\\extrust\\eboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689230669062},{"path":"D:\\extrust\\eboard\\node_modules\\babel-loader\\lib\\index.js","mtime":1689230675098},{"path":"D:\\extrust\\eboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689230669062},{"path":"D:\\extrust\\eboard\\node_modules\\vue-loader\\lib\\index.js","mtime":1689230676606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["netSalesReport.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA","file":"netSalesReport.vue","sourceRoot":"src/views/performance","sourcesContent":["<template>\r\n    <v-row>\r\n        <v-col cols=\"12\" md=\"4\" class=\"align-center\">\r\n            <v-card  class=\"scroll-card\">\r\n                <v-card-text >\r\n                    <apexchart   ref=\"chart\" type=\"bar\" :options=\"chartOptions\" :series=\"chartSeries\" height=\"350\"  @click=\"handleChartClick\"/>\r\n                </v-card-text >\r\n            </v-card>\r\n        \r\n        </v-col>\r\n        \r\n        <v-col cols=\"12\" md=\"8\" >\r\n            <v-card class=\"scroll-card\">\r\n                <v-card-text >\r\n                        <apexchart ref=\"chart2\" type=\"bar\" :options=\"chartOptions2\" :series=\"chartSeries2\" height=\"350\"  @click=\"handleChartClick\"/>\r\n\r\n                </v-card-text>\r\n            </v-card>\r\n        </v-col>\r\n\r\n        <v-col cols=\"12\" md=\"4\">\r\n            <DashboardCardSalesRankingbyGM />\r\n        </v-col>\r\n    </v-row>\r\n  </template>\r\n  \r\n  <script>\r\nimport VueApexCharts from \"vue-apexcharts\";\r\nimport DashboardCardSalesRankingbyGM from \"../dashboard/sales/DashboardCardSalesRankingbyGM.vue\";\r\n  export default {\r\n    components: {\r\n      apexchart: VueApexCharts,DashboardCardSalesRankingbyGM\r\n    },\r\n    data() {\r\n      return {\r\n        chartData :[],\r\n        chartOptions: {\r\n          chart: {\r\n            type: 'bar',\r\n            height: 350,\r\n            stacked: false, // 멀티 막대 차트를 스택으로 설정합니다.\r\n            animations: {\r\n                enabled: true,\r\n                easing: 'easeinout',\r\n                speed: 800,\r\n                animateGradually: {\r\n                    enabled: true,\r\n                    delay: 250\r\n                },\r\n                dynamicAnimation: {\r\n                    enabled: true,\r\n                    speed: 350\r\n                }\r\n            },\r\n            events: {\r\n                click: function(event, chartContext, config) {\r\n                    // The last parameter config contains additional information like `seriesIndex` and `dataPointIndex` for cartesian charts\r\n                    console.log(event);\r\n                }\r\n            }\r\n          },\r\n          plotOptions: {\r\n            bar: {\r\n              horizontal: false,\r\n            },\r\n          },\r\n          xaxis: {\r\n            categories: ['RENTAL','OUTRIGHT'], // X축 카테고리\r\n          },\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          fill: {\r\n            opacity: 10,\r\n          },\r\n         \r\n        },\r\n\r\n        chartOptions2: {\r\n          chart: {\r\n            type: 'bar',\r\n            height: 350,\r\n            stacked: false, // 멀티 막대 차트를 스택으로 설정합니다.\r\n            animations: {\r\n                enabled: true,\r\n                easing: 'easeinout',\r\n                speed: 800,\r\n                animateGradually: {\r\n                    enabled: true,\r\n                    delay: 250\r\n                },\r\n                dynamicAnimation: {\r\n                    enabled: true,\r\n                    speed: 350\r\n                }\r\n            },\r\n            events: {\r\n                click: function(event, chartContext, config) {\r\n                    // The last parameter config contains additional information like `seriesIndex` and `dataPointIndex` for cartesian charts\r\n                    console.log(event);\r\n                }\r\n            }\r\n          },\r\n          plotOptions: {\r\n            bar: {\r\n              horizontal: false,\r\n            },\r\n          },\r\n          xaxis: {\r\n            categories: this.categories()\r\n          },\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          fill: {\r\n            opacity: 10,\r\n          },\r\n        },\r\n\r\n        selectedBarIndex: null, // 클릭된 막대 그래프의 인덱스를 저장하는 변수\r\n        chartSeries: [\r\n          {\r\n            name: '당월 NetSales',\r\n            data: [20, 3], // 첫 번째 시리즈 데이터\r\n          },\r\n          {\r\n            name: '전월 NetSales',\r\n            data: [10, 2], // 첫 번째 시리즈 데이터\r\n          },\r\n          {\r\n            name: '전년동월 NetSales',\r\n            data: [40, 1], // 첫 번째 시리즈 데이터\r\n          }\r\n        ],\r\n      \r\n      };\r\n    },\r\n\r\n\r\n    computed: {\r\n        chartSeries2() {\r\n             return this.chartData;\r\n        },\r\n        likesSomeTarget() {\r\n             return this.selectedFilter.length > 0 && !this.clickAllTarget;\r\n        },\r\n    \r\n    },\r\n    \r\n    methods:{\r\n        categories() {\r\n            return ['GM1','GM2','GM3','GM4','GM5','GM6','GM7','GM8','GM9','GM10','GM11','GM12','GM13','GM14','GM15','GM16']\r\n        },\r\n        handleChartClick(event, chartContext, config) {\r\n            const seriesIndex = config.seriesIndex;\r\n            const dataPointIndex = config.dataPointIndex;\r\n            // 클릭된 막대 그래프의 인덱스를 저장\r\n            this.selectedBarIndex = dataPointIndex;\r\n\r\n            console.log(seriesIndex)\r\n            console.log(config)\r\n\r\n            switch (seriesIndex) {\r\n                case 0:\r\n                    this.sampleData_1();\r\n                    break;\r\n                case 1:\r\n                    this.sampleData_2();\r\n                    break;\r\n                case 2:\r\n                    this.sampleData_3();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        },\r\n        getBarColor(index) {\r\n            console.log(index)\r\n            // 클릭된 막대 그래프의 인덱스와 현재 막대 그래프의 인덱스가 같으면 특정 색상으로 변경\r\n            return index === this.selectedBarIndex ? '#FF5733' : null;\r\n        },\r\n\r\n        sampleData_1(){\r\n            this.chartData= [\r\n                    {\r\n                        name: '당월 NetSales',\r\n                        data: [30, 40, 45,70,80,90 ,100,30, 40, 45,70,80,90 ,100,0,30], // 첫 번째 시리즈 데이터\r\n                    },\r\n                    {\r\n                        name: '전월 NetSales',\r\n                        data: [20, 10, 35,90,10,20 ,139,40, 20, 15,70,80,90 ,70,10,30], // 두 번째 시리즈 데이터\r\n                    },\r\n                    {\r\n                        name: '전년동월 NetSales',\r\n                        data: [30, 10, 45,30,60,90 ,100,30, 90, 45,10,80,30 ,20,0,30], // 두 번째 시리즈 데이터\r\n                    }\r\n                    // 필요한 만큼 시리즈 추가 가능\r\n            ]\r\n        },\r\n        \r\n        sampleData_2(){\r\n            this.chartData= [\r\n                    {\r\n                        name: '당월 NetSales',\r\n                        data: [30, 40, 45,70,80,90 ,100,30, 40, 45,70,80,90 ,100,0,30], // 첫 번째 시리즈 데이터\r\n                    },\r\n                    {\r\n                        name: '전월 NetSales',\r\n                        data: [30, 40, 45,70,80,90 ,100,30, 40, 45,70,80,90 ,100,0,30], // 두 번째 시리즈 데이터\r\n                    },\r\n                    {\r\n                        name: '전년동월 NetSales',\r\n                        data: [30, 40, 45,20,130,10 ,140,10, 90, 35,20,30,90 ,30,10,90], // 두 번째 시리즈 데이터\r\n                    }\r\n                    // 필요한 만큼 시리즈 추가 가능\r\n            ]\r\n        },\r\n        sampleData_3(){\r\n            this.chartData= [\r\n                    {\r\n                        name: '당월 NetSales',\r\n                        data: [30, 10, 45,30,60,90 ,100,30, 90, 45,10,80,30 ,20,0,30],  /// 첫 번째 시리즈 데이터\r\n                    },\r\n                    {\r\n                        name: '전월 NetSales',\r\n                        data: [20, 10, 35,90,10,20 ,139,40, 20, 15,70,80,90 ,70,10,30], // 두 번째 시리즈 데이터\r\n                    },\r\n                    {\r\n                        name: '전년동월 NetSales',\r\n                        data: [30, 40, 45,70,80,90 ,100,30, 40, 45,70,80,90 ,100,0,30], // 두 번째 시리즈 데이터\r\n                    }\r\n                    // 필요한 만큼 시리즈 추가 가능\r\n            ]\r\n        }\r\n    }\r\n\r\n    \r\n  };\r\n  </script>\r\n  \r\n\r\n  <style scoped>\r\n    .scroll-card {\r\n        overflow-x: auto;\r\n    }\r\n  </style>"]}]}