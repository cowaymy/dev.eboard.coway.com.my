{"remainingRequest":"D:\\extrust\\eboard\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\extrust\\eboard\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\extrust\\eboard\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\extrust\\eboard\\src\\@core\\layouts\\components\\app-bar\\AppBarUserMenu.vue?vue&type=template&id=fab06d04&","dependencies":[{"path":"D:\\extrust\\eboard\\src\\@core\\layouts\\components\\app-bar\\AppBarUserMenu.vue","mtime":1708505905824},{"path":"D:\\extrust\\eboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689230669062},{"path":"D:\\extrust\\eboard\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1689230681317},{"path":"D:\\extrust\\eboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689230669062},{"path":"D:\\extrust\\eboard\\node_modules\\vue-loader\\lib\\index.js","mtime":1689230676606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}