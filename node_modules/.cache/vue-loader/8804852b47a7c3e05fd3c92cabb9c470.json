{"remainingRequest":"D:\\extrust\\eboard\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\extrust\\eboard\\src\\views\\comm\\AttendScanQRCodeResult.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"D:\\extrust\\eboard\\src\\views\\comm\\AttendScanQRCodeResult.vue","mtime":1707983434761},{"path":"D:\\extrust\\eboard\\node_modules\\css-loader\\dist\\cjs.js","mtime":1689230672011},{"path":"D:\\extrust\\eboard\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1689230680621},{"path":"D:\\extrust\\eboard\\node_modules\\postcss-loader\\src\\index.js","mtime":1689230675067},{"path":"D:\\extrust\\eboard\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1689230669010},{"path":"D:\\extrust\\eboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689230669062},{"path":"D:\\extrust\\eboard\\node_modules\\vue-loader\\lib\\index.js","mtime":1689230676606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIkBjb3JlL3ByZXNldC9wcmVzZXQvcGFnZXMvYXV0aC5zY3NzIjsK"},{"version":3,"sources":["AttendScanQRCodeResult.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6PA","file":"AttendScanQRCodeResult.vue","sourceRoot":"src/views/comm","sourcesContent":["<template>\n  <v-card color=\"text-center\">\n    <v-card-text class=\"d-flex flex-column justify-center align-center\">\n      <!-- <v-avatar\n\t\t\t\tcolor=\"success\"\n\t\t\t\tclass=\"v-avatar-light-bg primary--text mt-10\"\n\t\t\t\ticon\n\t\t\t\tsize=\"100\"\n\t\t\t> -->\n      <v-icon size=\"4rem\" :color=\"proColor\">\n        {{ proIcon }}\n      </v-icon>\n      <!-- </v-avatar> -->\n      <h6 class=\"text-5xl mt-4 font-weight-semibold\">{{ proText }}</h6>\n    </v-card-text>\n    <v-card-text>\n      {{ resultMessage }}\n    </v-card-text>\n    <v-card-text>\n      <v-divider></v-divider>\n    </v-card-text>\n\n    <v-card-text>\n      <h3 class=\"text-6xl mt-4 font-weight-semibold\">\n        {{ this.$store.state.userInfo.userName }}\n      </h3>\n      <div>{{ this.scandate }}</div>\n      <div>{{ this.scantime }}</div>\n      <div>[{{ this.scanbranchCode }}]{{ this.scanbranchName }}</div>\n      <v-divider></v-divider>\n      <div>\n        [location]::[{{ this.scanGpsInfo.location.geocode[0].postalCode }}]{{\n          this.scanGpsInfo.location.geocode[0].city\n        }}\n        - {{ this.scanGpsInfo.location.geocode[0].street }}\n      </div>\n    </v-card-text>\n\n    <v-card-text>\n      <v-btn\n        color=\"primary\"\n        class=\"mt-4\"\n        @click.native=\"$router.push('AttendHistory')\"\n      >\n        check Histroy</v-btn\n      >\n    </v-card-text>\n  </v-card>\n</template>\n\n<script>\nimport {\n  mdiClose,\n  mdiCheckBold,\n  mdiCheckDecagramOutline,\n  mdiHelpCircleOutline,\n  //mdiCheckUnderline,\n  //mdiAlertCircleOutline,\n  mdiAlertCircleCheck,\n  mdiCommentProcessingOutline,\n  mdiCheckCircle,\n  mdiAlertCircleOutline,\n} from \"@mdi/js\";\n\nimport { getMonthName, getDate } from \"../../utils/validation\";\n//import utils from '../../utils/utils';\nimport baseApi from \"../../api/index.js\";\nimport calendarApi from \"../../api/calendarApi.js\";\n\nimport {\n  saveAttendToCookie,\n  getAttendFromCookie,\n  deleteAtendCookie,\n} from \"../../utils/cookies.js\";\n\nexport default {\n  name: \"AttendScanQRResult\",\n  components: {},\n  props: {\n    scandata: { type: String, default: \"\" },\n    gpsInfo: { type: String, defalult: \"\" },\n    // resultCode: { type: String, default::'' 'fail' },\n    // resultMessage: { type: String, default: '' },\n  },\n  data() {\n    console.log(this.scandata.data);\n    return {\n      // icon\n      icons: {\n        mdiClose,\n      },\n      scandate: \"\",\n      scantime: \"\",\n      scanbranchName: \"\",\n      scanbranchCode: \"\",\n      scanGpsInfo: JSON.parse(this.gpsInfo),\n      month: getMonthName(),\n      ndate: getDate(),\n      mdiCheckBold,\n      mdiCheckDecagramOutline,\n      mdiHelpCircleOutline,\n      proColor: \"secondary\",\n      proText: \"\",\n      proIcon: mdiAlertCircleCheck,\n      resultCode: \"process\",\n      resultMessage: null,\n      mdiCheckCircle,\n    };\n  },\n\n  computed: {},\n  created() {\n    this.initProgress();\n    this.updateAttendData();\n  },\n  methods: {\n    initProgress() {\n      if (this.resultCode == \"process\") {\n        this.proColor = \"secondary \";\n        this.proText = \"progress\";\n        this.resultMessage = \"validation in progress...\";\n        this.proIcon = mdiCommentProcessingOutline;\n      }\n    },\n\n    /**\n     *\n     */\n    updateProgress(data) {\n      console.log(data);\n      if (data.success) {\n        this.proColor = \"success\";\n        this.proText = \"Success\";\n        this.resultMessage = data.message;\n        this.proIcon = mdiCheckCircle;\n\n        try {\n          this.scandate = `${data.dataList.attendscandate.substr(\n            6,\n            2\n          )} / ${data.dataList.attendscandate.substr(\n            4,\n            2\n          )} / ${data.dataList.attendscandate.substr(0, 4)} `;\n\n          this.scantime = `${data.dataList.attendscantime}`;\n        } catch (ex) {\n          console.log(ex);\n        }\n\n        // console.log(data.dataList.attendscandate.substr(0, 4));\n        // console.log(data.dataList.attendscandate.substr(4, 2));\n        // console.log(data.dataList.attendscandate.substr(6, 2));\n\n        if (\n          data.dataList.attendtoken != undefined &&\n          data.dataList.attendtoken != \"undefined\"\n        ) {\n          //delete cookie\n          deleteAtendCookie(this.$store.state.userInfo.userName);\n\n          //create new cookie\n          saveAttendToCookie(\n            this.$store.state.userInfo.userName,\n            data.dataList.attendtoken\n          );\n        }\n      } else {\n        this.proColor = \"error\";\n        this.proText = \"Failed\";\n        this.resultMessage = data.message;\n        this.proIcon = mdiAlertCircleOutline;\n      }\n    },\n\n    async updateAttendData() {\n      //{\"deviceId\":\"3f71f820c5781065\",\"currentTime\":\"09:47:04\" ,date:\"yyyymmdd\"}\n\n      try {\n        const param = this.scandata;\n        let obj = JSON.parse(param);\n\n        const payload = {\n          scanDate: obj.date,\n          scanTime: obj.currentTime,\n          scanDevice: obj.deviceId,\n          scanQRType: \"A0001\",\n          scanQRTypeDesc: \"QR\",\n          scanBranchLatitude: obj.branchLatitude,\n          scanBranchLongitude: obj.branchLongitude,\n          scanUserToken: getAttendFromCookie(\n            this.$store.state.userInfo.userName\n          ),\n          userName: this.$store.state.userInfo.userName,\n        };\n\n        const locData = await calendarApi.verifyLocationForHp({\n          id: this.$store.state.userInfo.userName,\n          deviceId: obj.deviceId,\n          latitude: obj.branchLatitude,\n          longitude: obj.branchLongitude,\n        });\n\n        if (!locData.data.success) {\n          this.updateProgress(locData.data);\n          return;\n        }\n\n        const data = await calendarApi.fetchAttendAllowLactionFroHp({\n          id: this.$store.state.userInfo.userName,\n          deviceId: obj.deviceId,\n          latitude: obj.branchLatitude,\n          longitude: obj.branchLongitude,\n        });\n\n        if (data.data.dataList[0].isAllow >= 1) {\n          const { data } = await baseApi.updateAttendData(payload);\n\n          const branchData = await calendarApi.fetchAttendBranchName(\n            obj.deviceId\n          );\n\n          if (branchData.data.success) {\n            this.scanbranchName =\n              branchData.data.dataList[0].attend_branch_name;\n            this.scanbranchCode =\n              branchData.data.dataList[0].attend_branch_code;\n          } else {\n            this.updateProgress(branchData.data);\n          }\n\n          this.updateProgress(data);\n        } else {\n          this.updateProgress({\n            success: false,\n            message:\n              \"You are not registered under this reporting branch. Kindly refer to your reporting manager\",\n          });\n        }\n      } catch (e) {\n        alert(e.toString);\n        console.log(e.toString());\n        let data = new Object();\n        data.success = false;\n        data.message = e.toString();\n        this.updateProgress(data);\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import \"@core/preset/preset/pages/auth.scss\";\n</style>\n"]}]}