{"remainingRequest":"D:\\extrust\\eboard.coway.com.my\\node_modules\\babel-loader\\lib\\index.js!D:\\extrust\\eboard.coway.com.my\\node_modules\\eslint-loader\\index.js??ref--14-0!D:\\extrust\\eboard.coway.com.my\\src\\api\\index.js","dependencies":[{"path":"D:\\extrust\\eboard.coway.com.my\\src\\api\\index.js","mtime":1710294924732},{"path":"D:\\extrust\\eboard.coway.com.my\\babel.config.js","mtime":1707983434823},{"path":"D:\\extrust\\eboard.coway.com.my\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689230669062},{"path":"D:\\extrust\\eboard.coway.com.my\\node_modules\\babel-loader\\lib\\index.js","mtime":1689230675098},{"path":"D:\\extrust\\eboard.coway.com.my\\node_modules\\eslint-loader\\index.js","mtime":1689230670675}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/extrust/eboard.coway.com.my/src/api/index.js"],"names":["createInstance","createFileDwnInstance","newInstance","registerUser","userData","post","userLogin","saveBase64Pdf","data","saveNotification","updateAttendData","updateAttendQRBranchData","getBestRecord","options","memCode","userName","memId","memberLevel","userTypeId","roleId","get","params","getBestRecordList","getNotification","ID","console","log","getNotificationDataList","param","getNewNotification","type","notificationType","notificationsType","updateHitNotification","getDetailNewNotification","getMenuList","selectShortcuts","getAppbarNotifications","selectAttachedNotificationFiles","fileUpLoad","form","header","mfileUpLoad","genPdfUpLoad","insertShortcuts","updateShortcuts","getImgData","imgPath","userImagePath","fileDownload","path","removeFile"],"mappings":"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","sourcesContent":["import { createInstance ,createFileDwnInstance} from \"./interceptors\";\n\nlet newInstance = createInstance();\n\nfunction registerUser(userData) {\n  return newInstance.post(\"signup\", userData);\n}\n\nfunction userLogin(userData) {\n  return newInstance.post(\"login\", userData);\n}\n\nasync function saveBase64Pdf(data) {\n  return newInstance.post(\"/apps/comm/genPdf\", data);\n}\n\nasync function saveNotification(data) {\n  return newInstance.post(\"/apps/comm/mergeNotification\", data);\n}\n\nasync function updateAttendData(data) {\n  return newInstance.post(\"/apps/comm/updateAttendData\", data);\n}\n\nasync function updateAttendQRBranchData(data) {\n  return newInstance.post(\"/apps/comm/updateAttendQRBranchData\", data);\n}\n\nasync function getBestRecord(userData) {\n  let options = {\n    memCode: userData.userName,\n    memId: userData.memId,\n    memberLevel: userData.memberLevel,\n    userName: userData.userName,\n    userTypeId: userData.userTypeId,\n    roleId: userData.roleId,\n  };\n  return newInstance.get(\"/apps/comm/bestRecord\", { params: options });\n}\n\nasync function getBestRecordList(userData) {\n  let options = {\n    memCode: userData.userName,\n    memId: userData.memId,\n    memberLevel: userData.memberLevel,\n    userName: userData.userName,\n    userTypeId: userData.userTypeId,\n    roleId: userData.roleId,\n  };\n  return newInstance.get(\"/apps/comm/bestRecordList\", { params: options });\n}\n\nasync function getNotification(userData) {\n  let options = {\n       ID: userData.ID,\n  };\n\n  console.log(options)\n  return newInstance.get(\"/apps/comm/notification\", { params: options });\n}\n\nasync function getNotificationDataList(param) {\n  // let options = {\n  // \tmemCode: userData.userName,\n  // \tmemId: userData.memId,\n  // \tmemberLevel: userData.memberLevel,\n  // \tuserName: userData.userName,\n  // \tuserTypeId: userData.userTypeId,\n  // \troleId: userData.roleId,\n  // \ttype: userData.type,\n  // \tnotificationType: userData.notificationsType,\n  // };\n\n  return newInstance.post(\"/apps/comm/notificationDataList\", param);\n}\n\nasync function getNewNotification(userData) {\n  let options = {\n    memCode: userData.userName,\n    memId: userData.memId,\n    memberLevel: userData.memberLevel,\n    userName: userData.userName,\n    userTypeId: userData.userTypeId,\n    roleId: userData.roleId,\n    type: userData.type,\n    notificationType: userData.notificationsType,\n  };\n\n  return newInstance.get(\"/apps/comm/getNewNotifications\", { params: options });\n}\n\nasync function updateHitNotification(userData) {\n  let options = {\n      ID : userData.ID,\n      userName: userData.userName\n  };\n\n  return newInstance.get(\"/apps/comm/updateHitNotification\", { params: options });\n}\n\n\n\n\nasync function getDetailNewNotification(userData) {\n  let options = {\n    memCode: userData.userName,\n    memId: userData.memId,\n    memberLevel: userData.memberLevel,\n    userName: userData.userName,\n    userTypeId: userData.userTypeId,\n    roleId: userData.roleId,\n    type: userData.type,\n    notificationType: userData.notificationsType,\n  };\n\n  return newInstance.get(\"/apps/comm/selectDetailNewNotifications\", {\n    params: options,\n  });\n}\n\nasync function getMenuList(userData) {\n  let options = {\n    memCode: userData.userName,\n  };\n  return newInstance.get(\"/apps/comm/selectMenuList\", {\n    params: options,\n  });\n}\n\nasync function selectShortcuts(userData) {\n  let options = {\n    memCode: userData.userName,\n  };\n\n  return newInstance.get(\"/apps/comm/selectShortcuts\", {\n    params: options,\n  });\n}\n\nasync function getAppbarNotifications(userData) {\n  let options = {\n    memCode: userData.userName,\n  };\n\n  return newInstance.get(\"/apps/comm/getAppbarNotifications\", {\n    params: options,\n  });\n}\n\n\nasync function selectAttachedNotificationFiles(userData) {\n  return newInstance.get(\"/apps/comm/selectAttachedNotificationFiles\", {\n    params: userData,\n  });\n}\n\n\n\nasync function fileUpLoad(form) {\n  return newInstance.post(\"/apps/comm/fileUpLoad\", form, {\n    header: { \"Content-Type\": \"multipart/form-data\" },\n  });\n}\n\n\nasync function mfileUpLoad(form) {\n  return newInstance.post(\"/apps/api/upload/mFileUpload\", form, {\n        header: { \"Content-Type\": \"multipart/form-data\" },\n  });\n}\n\n  \n\n\nasync function genPdfUpLoad(form) {\n  console.log(form);\n  return newInstance.post(\"/apps/comm/genPdf\", form);\n}\n\nasync function insertShortcuts(param) {\n  return newInstance.post(\"/apps/comm/insertShortcuts\", param);\n}\n\nasync function updateShortcuts(param) {\n  return newInstance.post(\"/apps/comm/updateShortcuts\", param);\n}\n\nasync function getImgData(userData) {\n  let options = {\n    imgPath: userData.userImagePath,\n  };\n\n  return newInstance.get(\"/img/viewImg\", { params: options });\n}\n\n\nasync function fileDownload(userData) {\n  let options = {\n    path: userData.path,\n  };\n  return createFileDwnInstance().get(\"/apps/comm/download\", { params: options });\n}\n\nasync function removeFile(userData) {\n  return newInstance.get(\"/apps/comm/removeFileID\", { params: userData });\n}\n\n\n\n\n\n\n\nexport default {\n  registerUser,\n  userLogin,\n  getBestRecord,\n  getBestRecordList,\n  getNotification,\n  saveNotification,\n  getNotificationDataList,\n  getNewNotification,\n  getDetailNewNotification,\n  fileUpLoad,mfileUpLoad,\n  getImgData,\n  updateAttendData,\n  updateAttendQRBranchData,\n  genPdfUpLoad,\n  saveBase64Pdf,\n  getMenuList,\n  selectShortcuts,\n  insertShortcuts,\n  updateShortcuts,\n  getAppbarNotifications,\n  updateHitNotification,selectAttachedNotificationFiles,fileDownload ,removeFile\n};\n"]}]}