{"remainingRequest":"D:\\extrust\\eboard\\node_modules\\babel-loader\\lib\\index.js!D:\\extrust\\eboard\\node_modules\\eslint-loader\\index.js??ref--14-0!D:\\extrust\\eboard\\src\\api\\index.js","dependencies":[{"path":"D:\\extrust\\eboard\\src\\api\\index.js","mtime":1694481273333},{"path":"D:\\extrust\\eboard\\babel.config.js","mtime":1639533184000},{"path":"D:\\extrust\\eboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689230669062},{"path":"D:\\extrust\\eboard\\node_modules\\babel-loader\\lib\\index.js","mtime":1689230675098},{"path":"D:\\extrust\\eboard\\node_modules\\eslint-loader\\index.js","mtime":1689230670675}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/extrust/eboard/src/api/index.js"],"names":["createInstance","newInstance","registerUser","userData","post","userLogin","saveBase64Pdf","data","saveNotification","updateAttendData","updateAttendQRBranchData","getBestRecord","options","memCode","userName","memId","memberLevel","userTypeId","roleId","get","params","getBestRecordList","getNotification","type","notificationType","notificationsType","getNotificationDataList","param","getNewNotification","getDetailNewNotification","fileUpLoad","form","header","genPdfUpLoad","console","log","getImgData","imgPath","userImagePath"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,gBAA/B;AAEA,IAAIC,WAAW,GAAGD,cAAc,EAAhC;;AAEA,SAASE,YAAT,CAAsBC,QAAtB,EAAgC;AAC/B,SAAOF,WAAW,CAACG,IAAZ,CAAiB,QAAjB,EAA2BD,QAA3B,CAAP;AACA;;AAED,SAASE,SAAT,CAAmBF,QAAnB,EAA6B;AAC5B,SAAOF,WAAW,CAACG,IAAZ,CAAiB,OAAjB,EAA0BD,QAA1B,CAAP;AACA;;SAEcG,a;;;;;2EAAf,iBAA6BC,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQN,WAAW,CAACG,IAAZ,CAAiB,mBAAjB,EAAsCG,IAAtC,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAIeC,gB;;;;;8EAAf,kBAAgCD,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACQN,WAAW,CAACG,IAAZ,CAAiB,8BAAjB,EAAiDG,IAAjD,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAIeE,gB;;;;;8EAAf,kBAAgCF,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACQN,WAAW,CAACG,IAAZ,CAAiB,6BAAjB,EAAgDG,IAAhD,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAIeG,wB;;;;;sFAAf,kBAAwCH,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACQN,WAAW,CAACG,IAAZ,CAAiB,qCAAjB,EAAwDG,IAAxD,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAIeI,a;;;;;2EAAf,kBAA6BR,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACKS,YAAAA,OADL,GACe;AACbC,cAAAA,OAAO,EAAEV,QAAQ,CAACW,QADL;AAEbC,cAAAA,KAAK,EAAEZ,QAAQ,CAACY,KAFH;AAGbC,cAAAA,WAAW,EAAEb,QAAQ,CAACa,WAHT;AAIbF,cAAAA,QAAQ,EAAEX,QAAQ,CAACW,QAJN;AAKbG,cAAAA,UAAU,EAAEd,QAAQ,CAACc,UALR;AAMbC,cAAAA,MAAM,EAAEf,QAAQ,CAACe;AANJ,aADf;AAAA,8CASQjB,WAAW,CAACkB,GAAZ,CAAgB,uBAAhB,EAAyC;AAAEC,cAAAA,MAAM,EAAER;AAAV,aAAzC,CATR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAYeS,iB;;;;;+EAAf,kBAAiClB,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACKS,YAAAA,OADL,GACe;AACbC,cAAAA,OAAO,EAAEV,QAAQ,CAACW,QADL;AAEbC,cAAAA,KAAK,EAAEZ,QAAQ,CAACY,KAFH;AAGbC,cAAAA,WAAW,EAAEb,QAAQ,CAACa,WAHT;AAIbF,cAAAA,QAAQ,EAAEX,QAAQ,CAACW,QAJN;AAKbG,cAAAA,UAAU,EAAEd,QAAQ,CAACc,UALR;AAMbC,cAAAA,MAAM,EAAEf,QAAQ,CAACe;AANJ,aADf;AAAA,8CASQjB,WAAW,CAACkB,GAAZ,CAAgB,2BAAhB,EAA6C;AAAEC,cAAAA,MAAM,EAAER;AAAV,aAA7C,CATR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAYeU,e;;;;;6EAAf,kBAA+BnB,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACKS,YAAAA,OADL,GACe;AACbC,cAAAA,OAAO,EAAEV,QAAQ,CAACW,QADL;AAEbC,cAAAA,KAAK,EAAEZ,QAAQ,CAACY,KAFH;AAGbC,cAAAA,WAAW,EAAEb,QAAQ,CAACa,WAHT;AAIbF,cAAAA,QAAQ,EAAEX,QAAQ,CAACW,QAJN;AAKbG,cAAAA,UAAU,EAAEd,QAAQ,CAACc,UALR;AAMbC,cAAAA,MAAM,EAAEf,QAAQ,CAACe,MANJ;AAObK,cAAAA,IAAI,EAAEpB,QAAQ,CAACoB,IAPF;AAQbC,cAAAA,gBAAgB,EAAErB,QAAQ,CAACsB;AARd,aADf;AAAA,8CAYQxB,WAAW,CAACkB,GAAZ,CAAgB,yBAAhB,EAA2C;AAAEC,cAAAA,MAAM,EAAER;AAAV,aAA3C,CAZR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAeec,uB;;;;;qFAAf,kBAAuCC,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,8CAYQ1B,WAAW,CAACG,IAAZ,CAAiB,iCAAjB,EAAoDuB,KAApD,CAZR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAeeC,kB;;;;;gFAAf,kBAAkCzB,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACKS,YAAAA,OADL,GACe;AACbC,cAAAA,OAAO,EAAEV,QAAQ,CAACW,QADL;AAEbC,cAAAA,KAAK,EAAEZ,QAAQ,CAACY,KAFH;AAGbC,cAAAA,WAAW,EAAEb,QAAQ,CAACa,WAHT;AAIbF,cAAAA,QAAQ,EAAEX,QAAQ,CAACW,QAJN;AAKbG,cAAAA,UAAU,EAAEd,QAAQ,CAACc,UALR;AAMbC,cAAAA,MAAM,EAAEf,QAAQ,CAACe,MANJ;AAObK,cAAAA,IAAI,EAAEpB,QAAQ,CAACoB,IAPF;AAQbC,cAAAA,gBAAgB,EAAErB,QAAQ,CAACsB;AARd,aADf;AAAA,8CAYQxB,WAAW,CAACkB,GAAZ,CAAgB,gCAAhB,EAAkD;AAAEC,cAAAA,MAAM,EAAER;AAAV,aAAlD,CAZR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAeeiB,wB;;;;;sFAAf,mBAAwC1B,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACKS,YAAAA,OADL,GACe;AACbC,cAAAA,OAAO,EAAEV,QAAQ,CAACW,QADL;AAEbC,cAAAA,KAAK,EAAEZ,QAAQ,CAACY,KAFH;AAGbC,cAAAA,WAAW,EAAEb,QAAQ,CAACa,WAHT;AAIbF,cAAAA,QAAQ,EAAEX,QAAQ,CAACW,QAJN;AAKbG,cAAAA,UAAU,EAAEd,QAAQ,CAACc,UALR;AAMbC,cAAAA,MAAM,EAAEf,QAAQ,CAACe,MANJ;AAObK,cAAAA,IAAI,EAAEpB,QAAQ,CAACoB,IAPF;AAQbC,cAAAA,gBAAgB,EAAErB,QAAQ,CAACsB;AARd,aADf;AAAA,+CAYQxB,WAAW,CAACkB,GAAZ,CAAgB,yCAAhB,EAA2D;AACjEC,cAAAA,MAAM,EAAER;AADyD,aAA3D,CAZR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAiBekB,U;;;;;wEAAf,mBAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQ9B,WAAW,CAACG,IAAZ,CAAiB,uBAAjB,EAA0C2B,IAA1C,EAAgD;AACtDC,cAAAA,MAAM,EAAE;AAAE,gCAAgB;AAAlB;AAD8C,aAAhD,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAMeC,Y;;;;;0EAAf,mBAA4BF,IAA5B;AAAA;AAAA;AAAA;AAAA;AACCG,YAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AADD,+CAEQ9B,WAAW,CAACG,IAAZ,CAAiB,mBAAjB,EAAsC2B,IAAtC,CAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAKeK,U;;;;;wEAAf,mBAA0BjC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACKS,YAAAA,OADL,GACe;AACbyB,cAAAA,OAAO,EAAElC,QAAQ,CAACmC;AADL,aADf;AAAA,+CAKQrC,WAAW,CAACkB,GAAZ,CAAgB,cAAhB,EAAgC;AAAEC,cAAAA,MAAM,EAAER;AAAV,aAAhC,CALR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQA,eAAe;AACdV,EAAAA,YAAY,EAAZA,YADc;AAEdG,EAAAA,SAAS,EAATA,SAFc;AAGdM,EAAAA,aAAa,EAAbA,aAHc;AAIdU,EAAAA,iBAAiB,EAAjBA,iBAJc;AAKdC,EAAAA,eAAe,EAAfA,eALc;AAMdd,EAAAA,gBAAgB,EAAhBA,gBANc;AAOdkB,EAAAA,uBAAuB,EAAvBA,uBAPc;AAQdE,EAAAA,kBAAkB,EAAlBA,kBARc;AASdC,EAAAA,wBAAwB,EAAxBA,wBATc;AAUdC,EAAAA,UAAU,EAAVA,UAVc;AAWdM,EAAAA,UAAU,EAAVA,UAXc;AAYd3B,EAAAA,gBAAgB,EAAhBA,gBAZc;AAadC,EAAAA,wBAAwB,EAAxBA,wBAbc;AAcduB,EAAAA,YAAY,EAAZA,YAdc;AAed3B,EAAAA,aAAa,EAAbA;AAfc,CAAf","sourcesContent":["import { createInstance } from './interceptors';\r\n\r\nlet newInstance = createInstance();\r\n\r\nfunction registerUser(userData) {\r\n\treturn newInstance.post('signup', userData);\r\n}\r\n\r\nfunction userLogin(userData) {\r\n\treturn newInstance.post('login', userData);\r\n}\r\n\r\nasync function saveBase64Pdf(data) {\r\n\treturn newInstance.post('/apps/comm/genPdf', data);\r\n}\r\n\r\nasync function saveNotification(data) {\r\n\treturn newInstance.post('/apps/comm/mergeNotification', data);\r\n}\r\n\r\nasync function updateAttendData(data) {\r\n\treturn newInstance.post('/apps/comm/updateAttendData', data);\r\n}\r\n\r\nasync function updateAttendQRBranchData(data) {\r\n\treturn newInstance.post('/apps/comm/updateAttendQRBranchData', data);\r\n}\r\n\r\nasync function getBestRecord(userData) {\r\n\tlet options = {\r\n\t\tmemCode: userData.userName,\r\n\t\tmemId: userData.memId,\r\n\t\tmemberLevel: userData.memberLevel,\r\n\t\tuserName: userData.userName,\r\n\t\tuserTypeId: userData.userTypeId,\r\n\t\troleId: userData.roleId,\r\n\t};\r\n\treturn newInstance.get('/apps/comm/bestRecord', { params: options });\r\n}\r\n\r\nasync function getBestRecordList(userData) {\r\n\tlet options = {\r\n\t\tmemCode: userData.userName,\r\n\t\tmemId: userData.memId,\r\n\t\tmemberLevel: userData.memberLevel,\r\n\t\tuserName: userData.userName,\r\n\t\tuserTypeId: userData.userTypeId,\r\n\t\troleId: userData.roleId,\r\n\t};\r\n\treturn newInstance.get('/apps/comm/bestRecordList', { params: options });\r\n}\r\n\r\nasync function getNotification(userData) {\r\n\tlet options = {\r\n\t\tmemCode: userData.userName,\r\n\t\tmemId: userData.memId,\r\n\t\tmemberLevel: userData.memberLevel,\r\n\t\tuserName: userData.userName,\r\n\t\tuserTypeId: userData.userTypeId,\r\n\t\troleId: userData.roleId,\r\n\t\ttype: userData.type,\r\n\t\tnotificationType: userData.notificationsType,\r\n\t};\r\n\r\n\treturn newInstance.get('/apps/comm/notification', { params: options });\r\n}\r\n\r\nasync function getNotificationDataList(param) {\r\n\t// let options = {\r\n\t// \tmemCode: userData.userName,\r\n\t// \tmemId: userData.memId,\r\n\t// \tmemberLevel: userData.memberLevel,\r\n\t// \tuserName: userData.userName,\r\n\t// \tuserTypeId: userData.userTypeId,\r\n\t// \troleId: userData.roleId,\r\n\t// \ttype: userData.type,\r\n\t// \tnotificationType: userData.notificationsType,\r\n\t// };\r\n\r\n\treturn newInstance.post('/apps/comm/notificationDataList', param);\r\n}\r\n\r\nasync function getNewNotification(userData) {\r\n\tlet options = {\r\n\t\tmemCode: userData.userName,\r\n\t\tmemId: userData.memId,\r\n\t\tmemberLevel: userData.memberLevel,\r\n\t\tuserName: userData.userName,\r\n\t\tuserTypeId: userData.userTypeId,\r\n\t\troleId: userData.roleId,\r\n\t\ttype: userData.type,\r\n\t\tnotificationType: userData.notificationsType,\r\n\t};\r\n\r\n\treturn newInstance.get('/apps/comm/getNewNotifications', { params: options });\r\n}\r\n\r\nasync function getDetailNewNotification(userData) {\r\n\tlet options = {\r\n\t\tmemCode: userData.userName,\r\n\t\tmemId: userData.memId,\r\n\t\tmemberLevel: userData.memberLevel,\r\n\t\tuserName: userData.userName,\r\n\t\tuserTypeId: userData.userTypeId,\r\n\t\troleId: userData.roleId,\r\n\t\ttype: userData.type,\r\n\t\tnotificationType: userData.notificationsType,\r\n\t};\r\n\r\n\treturn newInstance.get('/apps/comm/selectDetailNewNotifications', {\r\n\t\tparams: options,\r\n\t});\r\n}\r\n\r\nasync function fileUpLoad(form) {\r\n\treturn newInstance.post('/apps/comm/fileUpLoad', form, {\r\n\t\theader: { 'Content-Type': 'multipart/form-data' },\r\n\t});\r\n}\r\n\r\nasync function genPdfUpLoad(form) {\r\n\tconsole.log(form);\r\n\treturn newInstance.post('/apps/comm/genPdf', form);\r\n}\r\n\r\nasync function getImgData(userData) {\r\n\tlet options = {\r\n\t\timgPath: userData.userImagePath,\r\n\t};\r\n\r\n\treturn newInstance.get('/img/viewImg', { params: options });\r\n}\r\n\r\nexport default {\r\n\tregisterUser,\r\n\tuserLogin,\r\n\tgetBestRecord,\r\n\tgetBestRecordList,\r\n\tgetNotification,\r\n\tsaveNotification,\r\n\tgetNotificationDataList,\r\n\tgetNewNotification,\r\n\tgetDetailNewNotification,\r\n\tfileUpLoad,\r\n\tgetImgData,\r\n\tupdateAttendData,\r\n\tupdateAttendQRBranchData,\r\n\tgenPdfUpLoad,\r\n\tsaveBase64Pdf,\r\n};\r\n"]}]}