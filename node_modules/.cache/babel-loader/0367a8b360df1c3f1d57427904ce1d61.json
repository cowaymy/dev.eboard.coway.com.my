{"remainingRequest":"D:\\extrust\\eboard\\node_modules\\babel-loader\\lib\\index.js!D:\\extrust\\eboard\\node_modules\\eslint-loader\\index.js??ref--14-0!D:\\extrust\\eboard\\src\\api\\index.js","dependencies":[{"path":"D:\\extrust\\eboard\\src\\api\\index.js","mtime":1687772205213},{"path":"D:\\extrust\\eboard\\babel.config.js","mtime":1639533184000},{"path":"D:\\extrust\\eboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689230669062},{"path":"D:\\extrust\\eboard\\node_modules\\babel-loader\\lib\\index.js","mtime":1689230675098},{"path":"D:\\extrust\\eboard\\node_modules\\eslint-loader\\index.js","mtime":1689230670675}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/extrust/eboard/src/api/index.js"],"names":["createInstance","newInstance","registerUser","userData","post","userLogin","saveNotification","data","updateAttendData","updateAttendQRBranchData","getBestRecord","options","memCode","userName","memId","memberLevel","userTypeId","roleId","get","params","getBestRecordList","getNotification","type","notificationType","notificationsType","getNotificationDataList","param","getNewNotification","getDetailNewNotification","fileUpLoad","form","header","getImgData","imgPath","userImagePath"],"mappings":"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","sourcesContent":["import { createInstance } from './interceptors';\r\n\r\nlet newInstance = createInstance();\r\n\r\nfunction registerUser(userData) {\r\n\treturn newInstance.post('signup', userData);\r\n}\r\n\r\nfunction userLogin(userData) {\r\n\treturn newInstance.post('login', userData);\r\n}\r\n\r\nasync function saveNotification(data) {\r\n\treturn newInstance.post('/apps/comm/mergeNotification', data);\r\n}\r\n\r\nasync function updateAttendData(data) {\r\n\treturn newInstance.post('/apps/comm/updateAttendData', data);\r\n}\r\n\r\nasync function updateAttendQRBranchData(data) {\r\n\treturn newInstance.post('/apps/comm/updateAttendQRBranchData', data);\r\n}\r\n\r\nasync function getBestRecord(userData) {\r\n\tlet options = {\r\n\t\tmemCode: userData.userName,\r\n\t\tmemId: userData.memId,\r\n\t\tmemberLevel: userData.memberLevel,\r\n\t\tuserName: userData.userName,\r\n\t\tuserTypeId: userData.userTypeId,\r\n\t\troleId: userData.roleId,\r\n\t};\r\n\treturn newInstance.get('/apps/comm/bestRecord', { params: options });\r\n}\r\n\r\nasync function getBestRecordList(userData) {\r\n\tlet options = {\r\n\t\tmemCode: userData.userName,\r\n\t\tmemId: userData.memId,\r\n\t\tmemberLevel: userData.memberLevel,\r\n\t\tuserName: userData.userName,\r\n\t\tuserTypeId: userData.userTypeId,\r\n\t\troleId: userData.roleId,\r\n\t};\r\n\treturn newInstance.get('/apps/comm/bestRecordList', { params: options });\r\n}\r\n\r\nasync function getNotification(userData) {\r\n\tlet options = {\r\n\t\tmemCode: userData.userName,\r\n\t\tmemId: userData.memId,\r\n\t\tmemberLevel: userData.memberLevel,\r\n\t\tuserName: userData.userName,\r\n\t\tuserTypeId: userData.userTypeId,\r\n\t\troleId: userData.roleId,\r\n\t\ttype: userData.type,\r\n\t\tnotificationType: userData.notificationsType,\r\n\t};\r\n\r\n\treturn newInstance.get('/apps/comm/notification', { params: options });\r\n}\r\n\r\nasync function getNotificationDataList(param) {\r\n\t// let options = {\r\n\t// \tmemCode: userData.userName,\r\n\t// \tmemId: userData.memId,\r\n\t// \tmemberLevel: userData.memberLevel,\r\n\t// \tuserName: userData.userName,\r\n\t// \tuserTypeId: userData.userTypeId,\r\n\t// \troleId: userData.roleId,\r\n\t// \ttype: userData.type,\r\n\t// \tnotificationType: userData.notificationsType,\r\n\t// };\r\n\r\n\treturn newInstance.post('/apps/comm/notificationDataList', param);\r\n}\r\n\r\nasync function getNewNotification(userData) {\r\n\tlet options = {\r\n\t\tmemCode: userData.userName,\r\n\t\tmemId: userData.memId,\r\n\t\tmemberLevel: userData.memberLevel,\r\n\t\tuserName: userData.userName,\r\n\t\tuserTypeId: userData.userTypeId,\r\n\t\troleId: userData.roleId,\r\n\t\ttype: userData.type,\r\n\t\tnotificationType: userData.notificationsType,\r\n\t};\r\n\r\n\treturn newInstance.get('/apps/comm/getNewNotifications', { params: options });\r\n}\r\n\r\nasync function getDetailNewNotification(userData) {\r\n\tlet options = {\r\n\t\tmemCode: userData.userName,\r\n\t\tmemId: userData.memId,\r\n\t\tmemberLevel: userData.memberLevel,\r\n\t\tuserName: userData.userName,\r\n\t\tuserTypeId: userData.userTypeId,\r\n\t\troleId: userData.roleId,\r\n\t\ttype: userData.type,\r\n\t\tnotificationType: userData.notificationsType,\r\n\t};\r\n\r\n\treturn newInstance.get('/apps/comm/selectDetailNewNotifications', {\r\n\t\tparams: options,\r\n\t});\r\n}\r\n\r\nasync function fileUpLoad(form) {\r\n\treturn newInstance.post('/apps/comm/fileUpLoad', form, {\r\n\t\theader: { 'Content-Type': 'multipart/form-data' },\r\n\t});\r\n}\r\n\r\nasync function getImgData(userData) {\r\n\tlet options = {\r\n\t\timgPath: userData.userImagePath,\r\n\t};\r\n\r\n\treturn newInstance.get('/img/viewImg', { params: options });\r\n}\r\n\r\nexport default {\r\n\tregisterUser,\r\n\tuserLogin,\r\n\tgetBestRecord,\r\n\tgetBestRecordList,\r\n\tgetNotification,\r\n\tsaveNotification,\r\n\tgetNotificationDataList,\r\n\tgetNewNotification,\r\n\tgetDetailNewNotification,\r\n\tfileUpLoad,\r\n\tgetImgData,\r\n\tupdateAttendData,\r\n\tupdateAttendQRBranchData,\r\n};\r\n"]}]}